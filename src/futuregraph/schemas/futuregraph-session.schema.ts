// src/futuregraph/schemas/futuregraph-session.schema.ts
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

export type FuturegraphSessionDocument = FuturegraphSession & Document;

@Schema()
export class FuturegraphSession {
  /** Unique session identifier generated by the server */
  @Prop({ required: true, unique: true, index: true })
  sessionId!: string;

  /** Therapist user identifier */
  @Prop({ required: true, index: true })
  userId!: string;

  /** Client identifier */
  @Prop({ required: true, index: true })
  clientId!: string;

  /** Base64 encoded handwriting image - stored for retrieval */
  @Prop({ required: true })
  handwritingImage!: string;

  /** Arbitrary structured context provided at session start */
  @Prop({ type: Object })
  clientContext?: Record<string, any>;

  /** ISO timestamp for when the session was created */
  @Prop({ required: true })
  startTime!: Date;

  /** ISO timestamp for when the analysis was completed */
  @Prop()
  completedAt?: Date;

  /**
   * Preferred language for all AI outputs in this session.
   * Valid values are "en" and "he".
   */
  @Prop({ required: true, default: 'en' })
  language!: string;

  /**
   * Complete analysis results from the single-round FutureGraph process
   */
  @Prop({ type: Object })
  completeAnalysis?: Record<string, any>;

  /**
   * Generated report based on the analysis
   */
  @Prop({ type: Object })
  report?: Record<string, any>;

  /** Session status: 'processing', 'completed', 'failed' */
  @Prop({ required: true, default: 'processing' })
  status!: string;

  /** Error message if analysis failed */
  @Prop()
  error?: string;
}

export const FuturegraphSessionSchema =
  SchemaFactory.createForClass(FuturegraphSession);