import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

export type FuturegraphSessionDocument = FuturegraphSession & Document;

@Schema()
export class FuturegraphSession {
  /** Unique session identifier generated by the server */
  @Prop({ required: true, unique: true })
  sessionId!: string;

  /** Therapist user identifier */
  @Prop({ required: true })
  userId!: string;

  /** Client identifier */
  @Prop({ required: true })
  clientId!: string;

  /** Base64 encoded handwriting image */
  @Prop({ required: true })
  handwritingImage!: string;

  /** Arbitrary structured context provided at session start */
  @Prop({ type: Object })
  clientContext?: Record<string, any>;

  /** ISO timestamp for when the session was created */
  @Prop({ required: true })
  startTime!: Date;

  /**
   * Preferred language for all AI outputs in this session.  Defaults to
   * English ("en").  Valid values are currently "en" and "he".
   */
  @Prop({ default: 'en' })
  language!: string;

  /**
   * Array of round results.  Each entry contains the AI analysis and
   * associated metadata.
   */
  @Prop({ type: [Object], default: [] })
  rounds!: Array<{
    roundNumber: number;
    timestamp: Date;
    analysis: any;
    additionalContext?: any;
    therapistApproved: boolean;
    therapistFeedback?: string;
    approvalTimestamp?: Date;
    requiresReprocessing?: boolean;
    qaValidation?: {
      passed: boolean;
      violations: string[];
      warnings: string[];
    };
  }>;

  /** Current round index (1â€‘10) */
  @Prop({ default: 0 })
  currentRound!: number;

  /** Session status: 'active', 'completed', etc. */
  @Prop({ default: 'active' })
  status!: string;
}

export const FuturegraphSessionSchema =
  SchemaFactory.createForClass(FuturegraphSession);